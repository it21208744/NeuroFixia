import React, { useState, useEffect, useContext } from "react";
import axios from "axios";
import { useNavigate, useParams } from "react-router-dom";
import { LangContext } from "layouts/Social";

import downloadImg from "./images/sback.jpg";

// Voice recognition setup
const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
const recognition = new SpeechRecognition();
recognition.interimResults = false;

export default function Questionnaire() {
  const { setValue, lang } = useContext(LangContext); // ЁЯСИ Use context to change tabs
  console.log("Language is", lang);
  const [q1, setQ1] = useState("");
  const [q2, setQ2] = useState("");
  const [q3, setQ3] = useState("");
  const [q4, setQ4] = useState("");
  const [q5, setQ5] = useState("");
  const [q6, setQ6] = useState("");
  const [q7, setQ7] = useState("");
  const [q8, setQ8] = useState("");
  const [q9, setQ9] = useState("");
  const [q10, setQ10] = useState("");

  const [listening, setListening] = useState(null);
  const [result, setResult] = useState(""); // State to store the risk prediction result
  const [showPopup, setShowPopup] = useState(false); // State to control result popup visibility
  const [isLoading, setIsLoading] = useState(false); // State to track loading state

  //   const { lang } = useParams();
  const [translatedLabels, setTranslatedLabels] = useState({});
  const navigate = useNavigate();

  // Translations
  useEffect(() => {
    const translations = {
      english: {
        title: "Evaluation Form",
        q1: "1. Does your child point to indicate that s/he wants something? (e.g. a toy that is out of reach) ?",
        q2: "2. Does your child like to play with other children?",
        q3: "3. Does your child let you know when he/she is hungry, thirsty, or wants something specfic?",
        q4: "4. Does your child follow where you are looking? ",
        q5: "5. Can your child understand simple instructions given, such as 'Give the book to Amma' or 'Bring your slippers'?",
        q6: "6. If you or someone else in the family is visibly upset, does your child show signs of wanting to comfort them? (e.g. stroking hair, hugging them)?",
        q7: "7. Does your child behave well in crowded places like markets, bus stands, or festivals?",
        q8: "8. Does your child use simple gestures? (e.g. wave goodbye) ",
        q9: "9. Describe in detail how your child reacts when you call their name.",
        q10: "10. How does your child make eye contacts during conversations ?",
        yes: "Yes",
        no: "No",
        speak: "ЁЯФК Use your voice",
        submit: "Submit",
        resultMessage: "Risk Prediction:",
        close: "Close",
        waiting: "Waiting for result...",
      },
      sinhala: {
        title: "р╢┤р╖КтАНр╢╗р╖Бр╖Кр╢▒р╖Пр╖Ар╢╜р╖Т р╢┤р╖Эр╢╗р╢╕р╢║",
        q1: "1. р╢Фр╢╢р╖Ъ р╢пр╢╗р╖Фр╖Ар╖П р╢║р╢╕р╢Ър╖К р╢Ер╖Ар╖Бр╖КтАНр╢║ р╢╢р╖А р╢┤р╖Щр╢▒р╖Кр╖Ар╖Ур╢╕р╢з р╢Т р╢пр╖Щр╖Гр╢з р╢Ер╢н р╢пр╖Тр╢Ьр╖Ф р╢Ър╢╗р╢▒р╖Ар╖Пр╢п? (р╢Лр╢пр╖П: р╖Ер╢Яр╖П р╖Ар╖Тр╢║ р╢▒р╖Ьр╖Др╖Рр╢Ър╖Т р╖Гр╖Щр╢╜р╖Кр╢╜р╢╕р╖К р╢╢р╢йр╖Фр╖Ар╢Ър╖К)?",
        q2: "2. р╢Фр╢╢р╖Ъ р╢пр╢╗р╖Фр╖Ар╖П р╢Ер╢▒р╖Щр╢Ър╖К р╢пр╢╗р╖Фр╖Ар╢▒р╖К р╖Гр╢╕р╢Я р╢Ср╢Ър╖Кр╖Ар╖У р╖Гр╖Щр╢╜р╖Кр╢╜р╢╕р╖К р╢Ър╖Тр╢╗р╖Ур╢╕р╢з р╢Ър╖Рр╢╕р╢нр╖Тр╢п?",
        q3: "3. р╢Фр╢╢р╖Ъ р╢пр╢╗р╖Фр╖Ар╖П р╢Фр╖Др╖Фр╢з/р╢Зр╢║р╢з р╢╢р╢йр╢Ьр╖Тр╢▒р╖Т, р╢┤р╖Тр╢┤р╖Пр╖Гр╢║, р╖Др╖Э р╢▒р╖Тр╖Бр╖Кр╢ар╖Тр╢н  р╢║р╢╕р╢Ър╖К р╢Ер╖Ар╖Бр╖КтАНр╢║ р╖Ар╖Ц р╖Ар╖Тр╢з  р╢Фр╢╢р╢з р╢пр╢▒р╖Кр╖Ар╢▒р╖Ар╖Пр╢п?",
        q4: "4. р╢Фр╢╢р╖Ъ р╢пр╢╗р╖Фр╖Ар╖П р╢Фр╢╢ р╢╢р╢╜р╢▒ р╢пр╖Щр╖Г р╢Ер╖Ар╢пр╖Пр╢▒р╢║ р╢║р╖Ьр╢╕р╖Ф р╢Ър╢╗р╢▒р╖Ар╖Пр╢п?",
        q5: "5. 'р╢Ер╢╕р╖Кр╢╕р╖Пр╢з р╢┤р╖Ьр╢н р╢пр╖Щр╢▒р╖Кр╢▒' р╖Др╖Э 'р╢Фр╢╢р╖Ъ р╖Гр╖Щр╢╗р╖Щр╢┤р╖Кр╢┤р╖Ф р╢╗р╖Рр╢Ьр╖Щр╢▒ р╢Ср╢▒р╖Кр╢▒' р╖Ар╖Рр╢▒р╖Т р╖Гр╢╗р╢╜ р╢Лр╢┤р╢пр╖Щр╖Гр╖К р╢Фр╢╢р╖Ъ р╢пр╢╗р╖Фр╖Ар╖Пр╢з р╢нр╖Ър╢╗р╖Фр╢╕р╖К р╢Ьр╢н р╖Др╖Рр╢Ър╖Тр╢п?",
        q6: "6. р╢Фр╢╢ р╖Др╖Э р╢┤р╖Ар╖Фр╢╜р╖Ъ р╖Ар╖Щр╢▒р╢нр╖К р╢Ер╢║р╖Щр╢Ър╖Ф р╢Ър╢╜р╢╢р╢╜ р╖Ар╖У р╖Др╖Э р╢пр╖Фр╢Ър╢з р╢┤р╢нр╖Кр╖Ар╖У р╢Зр╢нр╖Кр╢▒р╢╕р╖К, р╢Фр╢╢р╖Ъ р╢пр╢╗р╖Фр╖Ар╖П р╢Фр╖Ар╖Фр╢▒р╖Кр╖А р╖Гр╢▒р╖Гр╖Пр╢╜р╖Ур╢╕р╢з р╢Ър╖Рр╢╕р╢нр╖Т р╢╢р╖Ар╢з р╖Гр╢╜р╢Ър╖Фр╢лр╖Ф р╢┤р╖Щр╢▒р╖Кр╖Ар╢▒р╖Ар╖Пр╢п?",
        q7: "7. р╖Ар╖Щр╖Ер╢│р╢┤р╖Ьр╖Ер╖Ар╢╜р╖К, р╢╢р╖Гр╖К р╢▒р╖Рр╖Ар╢нр╖Фр╢╕р╖Кр╢┤р╖Ьр╖Ер╖Ар╢╜р╖К р╖Др╖Э р╢Лр╢нр╖Кр╖Гр╖А р╖Ар╖Рр╢▒р╖Т р╢вр╢▒р╖Пр╢Ър╖Ур╢╗р╖Кр╢л р╖Гр╖Кр╢ор╖Пр╢▒р╖Ар╢╜ р╢Фр╢╢р╖Ъ р╢пр╢╗р╖Фр╖Ар╖П р╖Др╖Ьр╢│р╖Тр╢▒р╖К р╖Др╖Рр╖Гр╖Тр╢╗р╖Щр╢▒р╖Ар╖Пр╢п?",
        q8: "8. р╢Фр╢╢р╖Ъ р╢пр╢╗р╖Фр╖Ар╖П р╖Гр╢╗р╢╜ р╢Ер╢╖р╖Тр╢▒р╢║р╢▒р╖К р╢╖р╖Пр╖Ар╖Тр╢нр╖П р╢Ър╢╗р╢▒р╖Ар╖Пр╢п? (р╢Лр╢пр╖П: р╢Ер╢н р╖Ар╢▒р╢╕р╖Тр╢▒р╖К р╖Гр╢╕р╖Фр╢Ьр╖Рр╢▒р╖Ур╢╕)?",
        q9: "9. р╢Фр╢╢ р╢Фр╢╢р╖Ъ р╢пр╢╗р╖Фр╖Ар╖Пр╢Ьр╖Ъ р╢▒р╢╕ р╢Ер╢╕р╢нр╢▒ р╖Ар╖Тр╢з р╢Фр╖Др╖Ф р╢┤р╖КтАНр╢╗р╢нр╖Тр╢ар╖Пр╢╗ р╢пр╢Ър╖Кр╖Ар╢▒ р╢Жр╢Ър╖Пр╢╗р╢║ р╖Ар╖Тр╖Гр╖Кр╢нр╢╗ р╢Ър╢╗р╢▒р╖Кр╢▒.",
        q10: "10. р╖Гр╢Вр╖Ар╖Пр╢п р╢Ер╢нр╢╗р╢нр╖Фр╢╗ р╢Фр╢╢р╖Ъ р╢пр╢╗р╖Фр╖Ар╖П р╢Зр╖Гр╖К р╖Гр╢╢р╢пр╢нр╖Пр╖Ар╢║ р╢┤р╖Ар╢нр╖Кр╖Ар╖П р╢Ьр╢▒р╖Кр╢▒р╖Ъ р╢Ър╖Щр╖Гр╖Ър╢п?",
        yes: "р╢Фр╖Ар╖К",
        no: "р╢▒р╖Рр╢н",
        speak: "ЁЯФК р╖Др╢м р╢╖р╖Пр╖Ар╖Тр╢нр╢║",
        submit: "р╢Йр╢пр╖Тр╢╗р╖Тр╢║р╢з р╢║р╢▒р╖Кр╢▒",
        resultMessage: "р╢Ер╖Ар╢пр╖Пр╢▒р╢╕р╖К р╢Ер╢▒р╖Пр╖Ар╖Рр╢Ър╖Тр╢║:",
        close: "р╖Ар╖Гр╢▒р╖Кр╢▒",
        waiting: "р╢┤р╖КтАНр╢╗р╢нр╖Тр╢╡р╢╜р╢║ р╢╜р╢╢р╖П р╢Ьр╖Рр╢▒р╖Ур╢╕р╢з р╢╗р╖Рр╢│р╖У р╖Гр╖Тр╢зр╖Тр╢▒р╖Кр╢▒...",
      },
      tamil: {
        title: "роХрпБро┤роирпНродрпИ родройро┐родрпНродрпБро╡роорпН роородро┐рокрпНрокрпАроЯрпБ",
        q1: "1. роХрпБроЯрпБроорпНрок роЙро▒рпБрокрпНрокро┐ройро░рпНроХро│рпН роЕро▓рпНро▓родрпБ рокро╛ро░рпНро╡рпИропро╛ро│ро░рпНроХро│рпБроЯройро╛рой роЙро░рпИропро╛роЯро▓рпНроХро│рпН роЕро▓рпНро▓родрпБ родрпКроЯро░рпНрокрпБроХро│ро┐ройрпН рокрпЛродрпБ роЙроЩрпНроХро│рпН роХрпБро┤роирпНродрпИ роХрогрпН родрпКроЯро░рпНрокрпБ роХрпКро│рпНроХро┐ро▒родро╛?",
        q2: "2. роЕро░рпИроХрпНроХрпБроорпН роЗропроирпНродро┐ро░роЩрпНроХро│рпН роЕро▓рпНро▓родрпБ роХрпЛро╡ро┐ро▓рпН/родрпЗро╡ро╛ро▓роп роорогро┐ рокрпЛройрпНро▒ рокрпКродрпБро╡ро╛рой ро╡рпАроЯрпНроЯрпБроЪрпН роЪродрпНродроЩрпНроХро│рпБроХрпНроХрпБ роЙроЩрпНроХро│рпН роХрпБро┤роирпНродрпИ рокропрокрпНрокроЯрпБроХро┐ро▒родро╛ роЕро▓рпНро▓родрпБ роХроЯрпБроорпИропро╛роХ роОродро┐ро░рпНро╡ро┐ройрпИропро╛ро▒рпНро▒рпБроХро┐ро▒родро╛?",
        q3: "3. роЙроЩрпНроХро│рпН роХрпБро┤роирпНродрпИ рооро▒рпНро▒ роХрпБро┤роирпНродрпИроХро│рпБроЯройрпН роЪрпЗро░рпНроирпНродрпБ ро╡ро┐ро│рпИропро╛роЯрпБро╡родрпИ ро╡ро┐роЯ родройро┐ропро╛роХ ро╡ро┐ро│рпИропро╛роЯрпБро╡родрпИ ро╡ро┐ро░рпБроорпНрокрпБроХро┐ро▒родро╛?",
        q4: "4. роЯро┐ро╡ро┐ роЙро░рпИропро╛роЯро▓рпНроХро│рпН роЕро▓рпНро▓родрпБ рокро╛роЯро▓рпНроХро│рпН рокрпЛройрпНро▒ роЪрпВро┤ро▓рпБроХрпНроХрпБ роЕрокрпНрокро╛ро▒рпНрокроЯрпНроЯ ро╡ро╛ро░рпНродрпНродрпИроХро│рпН роЕро▓рпНро▓родрпБ роЪрпКро▒рпНро▒рпКроЯро░рпНроХро│рпИ роЙроЩрпНроХро│рпН роХрпБро┤роирпНродрпИ роорпАрогрпНроЯрпБроорпН роЪрпКро▓рпНроХро┐ро▒ро╛ро░ро╛?",
        q5: "5. 'рокрпБродрпНродроХродрпНродрпИ роЕроорпНрооро╛ро╡ро┐роЯроорпН роХрпКроЯрпБ' роЕро▓рпНро▓родрпБ 'роЙроЩрпНроХро│рпН роЪрпЖро░рпБрокрпНрокрпБроХро│рпИроХрпН роХрпКрогрпНроЯрпБ ро╡ро╛ро░рпБроЩрпНроХро│рпН' рокрпЛройрпНро▒ роОро│ро┐роп ро╡ро┤ро┐роорпБро▒рпИроХро│рпИ роЙроЩрпНроХро│рпН роХрпБро┤роирпНродрпИ рокрпБро░ро┐роирпНродрпБроХрпКро│рпНро│ роорпБроЯро┐ропрпБрооро╛?",
        q6: "6. роЙрогро╡ро┐ройрпН рокрпЛродрпБ роЕро▓рпНро▓родрпБ ро╡ро┐ро│рпИропро╛роЯрпБроорпН рокрпЛродрпБ роЙроЩрпНроХро│рпН роХрпБро┤роирпНродрпИ роЙроЩрпНроХро│рпН рокрпЖропро░рпИроЪрпН роЪрпКро▓рпНро▓ро┐ роЕро┤рпИроХрпНроХрпБроорпН рокрпЛродрпБ роЕро╡ро░рпН роОро╡рпНро╡ро╛ро▒рпБ рокродро┐ро▓ро│ро┐рокрпНрокро╛ро░рпН?",
        q7: "7. роЪроирпНродрпИроХро│рпН, рокрпЗро░рпБроирпНродрпБ роиро┐ро▓рпИропроЩрпНроХро│рпН роЕро▓рпНро▓родрпБ родро┐ро░рпБро╡ро┐ро┤ро╛роХрпНроХро│рпН рокрпЛройрпНро▒ роирпЖро░ро┐роЪро▓ро╛рой роЗроЯроЩрпНроХро│ро┐ро▓рпН роЙроЩрпНроХро│рпН роХрпБро┤роирпНродрпИ роОрокрпНрокроЯро┐ роироЯроирпНродрпБ роХрпКро│рпНроХро┐ро▒родрпБ?",
        q8: "8. роЙроЩрпНроХро│рпН рокро┐ро│рпНро│рпИ рокроЪро┐ропро╛роХ роЗро░рпБроХрпНроХрпБроорпНрокрпЛродрпБ, тАЛтАЛродро╛роХрооро╛роХ роЗро░рпБроХрпНроХрпБроорпНрокрпЛродрпБ роЕро▓рпНро▓родрпБ роХрпБро▒ро┐рокрпНрокро┐роЯрпНроЯ роТройрпНро▒рпИ ро╡ро┐ро░рпБроорпНрокрпБроорпНрокрпЛродрпБ роОрокрпНрокроЯро┐ роЙроЩрпНроХро│рпБроХрпНроХрпБродрпН родрпЖро░ро┐ропрокрпНрокроЯрпБродрпНродрпБро╡ро╛ро░рпН?",
        q9: "9. роЙроЩрпНроХро│рпН рокро┐ро│рпНро│рпИ рокрпКроорпНроорпИроХро│рпН роЕро▓рпНро▓родрпБ ро╡рпАроЯрпНроЯрпБрокрпН рокрпКро░рпБроЯрпНроХро│рпН рокрпЛройрпНро▒ рокрпКро░рпБроЯрпНроХро│рпИ ро╡рпИродрпНродрпБ ро╡ро┐ро│рпИропро╛роЯрпБроорпНрокрпЛродрпБ рокрпКродрпБро╡ро╛роХ роОройрпНрой роЪрпЖропрпНро╡ро╛ро░рпН?",
        q10: "10. ро╡рпАроЯрпНроЯро┐ро▓рпН рокрпБродро┐роп роЕро▓рпНро▓родрпБ роЕро▒ро┐роорпБроХрооро┐ро▓рпНро▓ро╛род роТройрпНро▒рпИ роЪрпЖропрпНропрпБроорпНрокроЯро┐ роХрпЗроЯрпНроХрокрпНрокроЯрпБроорпН рокрпЛродрпБ роЙроЩрпНроХро│рпН роХрпБро┤роирпНродрпИ роОро╡рпНро╡ро╛ро▒рпБ рокродро┐ро▓ро│ро┐роХрпНроХро┐ро▒ро╛ро░рпН?",
        yes: "роЖроорпН",
        no: "роЗро▓рпНро▓рпИ",
        speak: "ЁЯФК роХрпБро░ро▓рпН рокропройрпНрокроЯрпБродрпНрод",
        submit: "роЪрооро░рпНрокрпНрокро┐роХрпНроХро╡рпБроорпН",
        resultMessage: "роЕрокро╛ропроорпН роХрогро┐рокрпНрокрпБ:",
        close: "роорпВроЯрпБ",
        waiting: "роорпБроЯро┐ро╡рпБроХрпНроХро╛роХ роХро╛родрпНродро┐ро░рпБроХрпНроХро┐ро▒родрпБ...",
      },
    };
    if (translations[lang]) {
      setTranslatedLabels(translations[lang]);
      document.title = translations[lang].title;
    } else {
      console.warn(`Unsupported language code: ${lang}`);
      setTranslatedLabels(translations["english"]); // fallback
      document.title = "Autism Risk Assessment";
    }
  }, [lang]);

  // Speech recognition
  function startListening(field) {
    setListening(field);

    // Set the language based on the selected language
    if (lang === "sinhala") recognition.lang = "si-LK";
    else if (lang === "tamil") recognition.lang = "ta-LK";
    else recognition.lang = "en-US";

    // Try to start recognition and catch errors if recognition has already started
    try {
      recognition.start();
    } catch (error) {
      if (error instanceof DOMException && error.code === DOMException.INVALID_STATE_ERR) {
        console.log("Recording already started.");
        // Optionally, show an alert or message on the UI
        alert("Speech Recognition already started.");
      } else {
        console.error("An error occurred: ", error);
      }
    }
  }

  recognition.onresult = (event) => {
    const spokenText = event.results[0][0].transcript;

    if (listening === "q6") setQ6(spokenText);
    if (listening === "q7") setQ7(spokenText);
    if (listening === "q8") setQ8(spokenText);
    if (listening === "q9") setQ9(spokenText);
    if (listening === "q10") setQ10(spokenText);

    setListening(null);
  };

  recognition.onspeechend = () => recognition.stop();

  // Submit form
  async function handleSubmit(e) {
    e.preventDefault();

    const newSales = { q1, q2, q3, q4, q5, q6, q7, q8, q9, q10 };

    setIsLoading(true); // Set loading state to true

    try {
      // Send data to Express.js for analysis and saving
      const response = await axios.post("http://localhost:8070/Sroute/analyze", newSales);
      const riskPrediction = response.data.risk_prediction;

      // Set the result state with the translated message and show the popup
      if (lang === "sinhala") {
        setResult(
          riskPrediction === 1
            ? "р╢Фр╢╢р╖Ъ р╢пр╢╗р╖Фр╖Ар╖Пр╢з р╢Фр╢зр╖Тр╖Гр╢╕р╖К р╢╗р╖Эр╢Ьр╢║р╢з р╖Гр╢╕р╖Кр╢╢р╢▒р╖Кр╢░ р╖Гр╢╕р╖Пр╢в р╢Ър╖Фр╖Гр╢╜р╢нр╖П р╢пр╖Фр╖Вр╖Кр╢Ър╢╗р╢нр╖П р╢нр╖Тр╢╢р╖Ъ, р╖Ар╖Рр╢йр╖Тр╢пр╖Тр╢║р╖Фр╢лр╖Ф р╢Ър╖Тр╢╗р╖Ур╢╕р╖Ъ р╢Ър╖КтАНр╢╗р╖Тр╢║р╖Пр╢Ър╖Пр╢╗р╢Ър╢╕р╖К р╢┤р╢╗р╖Ур╢Ър╖Кр╖Вр╖П р╢Ър╢╗р╢▒р╖Кр╢▒"
            : "р╢Ер╖Ар╢пр╖Пр╢▒р╢╕р╢Ър╖К р╢▒р╖Рр╢н"
        );
      } else if (lang === "tamil") {
        setResult(riskPrediction === 1 ? "роЖрокродрпНродрпБ роХрогрпНроЯро▒ро┐ропрокрпНрокроЯрпНроЯродрпБ" : "роЖрокродрпНродрпБ роХрогрпНроЯро▒ро┐ропрокрпНрокроЯро╡ро┐ро▓рпНро▓рпИ");
      } else {
        setResult(
          riskPrediction === 1
            ? "Your child has social skills difficulties related to autism, Checkout improvement activities"
            : "No Risk Detected"
        );
      }

      setShowPopup(true); // Show the result popup
    } catch (err) {
      alert("Error submitting the form: " + err.message);
    } finally {
      setIsLoading(false); // Reset loading state
    }
  }

  // Close the popup
  const closePopup = () => {
    setShowPopup(false);
    setValue("three");
  };

  // Styles
  const containerStyle = {
    padding: "20px",
    backgroundColor: "#E8EFF4",
    overflow: "hidden",
    boxShadow: "0 2px 20px",
    borderRadius: "$radius",
    transition: "transform 200ms ease-in",
    padding: "20px",
    backdropFilter: "blur(50px)",
    maxWidth: "1000px",
    margin: "0 auto",
    marginTop: "50px",
    flexDirection: "column",
    alignItems: "center",
  };
  const labelStyle = {
    marginBottom: "8px",
    display: "block",
    color: "#1C325B",
    fontWeight: "bold",
  };
  const inputStyle = {
    width: "100%",
    marginBottom: "15px",
    padding: "12px",
    border: "1px solid #ccc",
    borderRadius: "5px",
    fontSize: "16px",
    boxSizing: "border-box",
  };
  const buttonStyle = {
    backgroundImage: "linear-gradient(125deg,#1C325B,#4A628A)",
    color: "#fff",
    padding: "12px 40px",
    borderRadius: "5px",
    border: "none",
    cursor: "pointer",
    fontSize: "16px",
    width: "20%",
    marginTop: "15px",
    marginLeft: "auto",
    //display: "block",
    textAlign: "center",
    display: "flex", // Ensure flexbox is used
    justifyContent: "center", // Horizontally center text
    alignItems: "center", // Vertically center text
  };
  const speakButtonStyle = {
    backgroundColor: "transparent",
    padding: "10px 20px",
    borderRadius: "5px",
    border: "none",
    cursor: "pointer",
    fontSize: "16px",
    marginTop: "10px",
    outline: "none",
    boxShadow: "none",
  };

  // Define lastFieldStyle
  const lastFieldStyle = {
    display: "flex",
    flexDirection: "column",
    alignItems: "flex-start",
    width: "100%",
    marginBottom: "20px",
  };

  // Popup styles
  const popupStyle = {
    position: "fixed",
    top: "50%",
    left: "50%",
    transform: "translate(-50%, -50%)",
    backgroundColor: "#fff",
    padding: "40px",
    borderRadius: "10px",
    boxShadow: "0 4px 8px rgba(0, 0, 0, 0.2)",
    zIndex: 1000,
    textAlign: "center",
  };
  const overlayStyle = {
    position: "fixed",
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: "rgba(0, 0, 0, 0.5)",
    zIndex: 999,
  };

  return (
    <>
      <div
      // style={{
      //   backgroundImage: `url(${downloadImg})`,
      //   backgroundRepeat: "no-repeat",
      //   backgroundSize: "cover",
      //   width: "100vw",
      //   height: "300vh",
      // }}
      >
        <h3 style={{ textAlign: "center", fontWeight: "10px" }}>{translatedLabels.title}</h3>
        <form onSubmit={handleSubmit} style={containerStyle}>
          {[...Array(8).keys()].map((i) => (
            <div key={i} style={{ width: "100%" }}>
              <label style={labelStyle}>{translatedLabels[`q${i + 1}`]}</label>
              <select
                required
                value={eval(`q${i + 1}`)}
                onChange={(e) => eval(`setQ${i + 1}(e.target.value)`)}
                style={inputStyle}
              >
                <option value="">
                  {translatedLabels.yes}/{translatedLabels.no}
                </option>
                <option value={translatedLabels.yes}>{translatedLabels.yes}</option>
                <option value={translatedLabels.no}>{translatedLabels.no}</option>
              </select>
            </div>
          ))}

          {[...Array(2).keys()].map((i) => (
            <div key={i + 8} style={lastFieldStyle}>
              <label style={labelStyle}>{translatedLabels[`q${i + 9}`]}</label>
              <textarea
                required
                value={eval(`q${i + 9}`)}
                onChange={(e) => eval(`setQ${i + 9}(e.target.value)`)}
                style={inputStyle}
                rows="2"
              />
              <button
                type="button"
                onClick={() => startListening(`q${i + 9}`)}
                style={speakButtonStyle}
              >
                {translatedLabels.speak}
              </button>
            </div>
          ))}
          <button type="submit" style={buttonStyle} disabled={isLoading}>
            {translatedLabels.submit}
          </button>
        </form>

        {/* Loading Popup */}
        {isLoading && (
          <>
            <div style={overlayStyle}></div>
            <div style={popupStyle}>
              <h3>{translatedLabels.waiting}</h3>
            </div>
          </>
        )}

        {/* Result Popup */}
        {showPopup && (
          <>
            <div style={overlayStyle} onClick={closePopup}></div>
            <div style={popupStyle}>
              <h3>{translatedLabels.resultMessage}</h3>
              <p>{result}</p>
              <button onClick={closePopup} style={buttonStyle}>
                {translatedLabels.close}
              </button>
            </div>
          </>
        )}
      </div>
    </>
  );
}
